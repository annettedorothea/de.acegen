/**
 * generated by Xtext 2.26.0
 */
package de.acegen.aceGen.impl;

import de.acegen.aceGen.AceGenPackage;
import de.acegen.aceGen.ClientGivenRef;
import de.acegen.aceGen.ClientScenario;
import de.acegen.aceGen.ClientWhenThen;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Client Scenario</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.acegen.aceGen.impl.ClientScenarioImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientScenarioImpl#getGivenRefs <em>Given Refs</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientScenarioImpl#getClientWhenThen <em>Client When Then</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClientScenarioImpl extends MinimalEObjectImpl.Container implements ClientScenario
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getGivenRefs() <em>Given Refs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGivenRefs()
   * @generated
   * @ordered
   */
  protected EList<ClientGivenRef> givenRefs;

  /**
   * The cached value of the '{@link #getClientWhenThen() <em>Client When Then</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClientWhenThen()
   * @generated
   * @ordered
   */
  protected EList<ClientWhenThen> clientWhenThen;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClientScenarioImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AceGenPackage.Literals.CLIENT_SCENARIO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_SCENARIO__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClientGivenRef> getGivenRefs()
  {
    if (givenRefs == null)
    {
      givenRefs = new EObjectContainmentEList<ClientGivenRef>(ClientGivenRef.class, this, AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS);
    }
    return givenRefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClientWhenThen> getClientWhenThen()
  {
    if (clientWhenThen == null)
    {
      clientWhenThen = new EObjectContainmentEList<ClientWhenThen>(ClientWhenThen.class, this, AceGenPackage.CLIENT_SCENARIO__CLIENT_WHEN_THEN);
    }
    return clientWhenThen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        return ((InternalEList<?>)getGivenRefs()).basicRemove(otherEnd, msgs);
      case AceGenPackage.CLIENT_SCENARIO__CLIENT_WHEN_THEN:
        return ((InternalEList<?>)getClientWhenThen()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        return getName();
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        return getGivenRefs();
      case AceGenPackage.CLIENT_SCENARIO__CLIENT_WHEN_THEN:
        return getClientWhenThen();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        setName((String)newValue);
        return;
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        getGivenRefs().clear();
        getGivenRefs().addAll((Collection<? extends ClientGivenRef>)newValue);
        return;
      case AceGenPackage.CLIENT_SCENARIO__CLIENT_WHEN_THEN:
        getClientWhenThen().clear();
        getClientWhenThen().addAll((Collection<? extends ClientWhenThen>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        getGivenRefs().clear();
        return;
      case AceGenPackage.CLIENT_SCENARIO__CLIENT_WHEN_THEN:
        getClientWhenThen().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        return givenRefs != null && !givenRefs.isEmpty();
      case AceGenPackage.CLIENT_SCENARIO__CLIENT_WHEN_THEN:
        return clientWhenThen != null && !clientWhenThen.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ClientScenarioImpl
