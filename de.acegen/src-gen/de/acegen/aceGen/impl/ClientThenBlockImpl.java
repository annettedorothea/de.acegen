/**
 * generated by Xtext 2.29.0
 */
package de.acegen.aceGen.impl;

import de.acegen.aceGen.AceGenPackage;
import de.acegen.aceGen.ClientThenBlock;
import de.acegen.aceGen.CustomVerification;
import de.acegen.aceGen.StateVerification;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Client Then Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.acegen.aceGen.impl.ClientThenBlockImpl#getStateVerifications <em>State Verifications</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientThenBlockImpl#getVerifications <em>Verifications</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClientThenBlockImpl extends MinimalEObjectImpl.Container implements ClientThenBlock
{
  /**
   * The cached value of the '{@link #getStateVerifications() <em>State Verifications</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateVerifications()
   * @generated
   * @ordered
   */
  protected EList<StateVerification> stateVerifications;

  /**
   * The cached value of the '{@link #getVerifications() <em>Verifications</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVerifications()
   * @generated
   * @ordered
   */
  protected EList<CustomVerification> verifications;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClientThenBlockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AceGenPackage.Literals.CLIENT_THEN_BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StateVerification> getStateVerifications()
  {
    if (stateVerifications == null)
    {
      stateVerifications = new EObjectContainmentEList<StateVerification>(StateVerification.class, this, AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS);
    }
    return stateVerifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CustomVerification> getVerifications()
  {
    if (verifications == null)
    {
      verifications = new EObjectContainmentEList<CustomVerification>(CustomVerification.class, this, AceGenPackage.CLIENT_THEN_BLOCK__VERIFICATIONS);
    }
    return verifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        return ((InternalEList<?>)getStateVerifications()).basicRemove(otherEnd, msgs);
      case AceGenPackage.CLIENT_THEN_BLOCK__VERIFICATIONS:
        return ((InternalEList<?>)getVerifications()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        return getStateVerifications();
      case AceGenPackage.CLIENT_THEN_BLOCK__VERIFICATIONS:
        return getVerifications();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        getStateVerifications().clear();
        getStateVerifications().addAll((Collection<? extends StateVerification>)newValue);
        return;
      case AceGenPackage.CLIENT_THEN_BLOCK__VERIFICATIONS:
        getVerifications().clear();
        getVerifications().addAll((Collection<? extends CustomVerification>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        getStateVerifications().clear();
        return;
      case AceGenPackage.CLIENT_THEN_BLOCK__VERIFICATIONS:
        getVerifications().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        return stateVerifications != null && !stateVerifications.isEmpty();
      case AceGenPackage.CLIENT_THEN_BLOCK__VERIFICATIONS:
        return verifications != null && !verifications.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ClientThenBlockImpl
