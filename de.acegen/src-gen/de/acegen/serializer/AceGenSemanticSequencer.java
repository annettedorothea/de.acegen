/*
 * generated by Xtext 2.27.0
 */
package de.acegen.serializer;

import com.google.inject.Inject;
import de.acegen.aceGen.AceGenPackage;
import de.acegen.aceGen.Attribute;
import de.acegen.aceGen.AttributeAndValue;
import de.acegen.aceGen.AttributeParamRef;
import de.acegen.aceGen.AuthUser;
import de.acegen.aceGen.Authorization;
import de.acegen.aceGen.BooleanType;
import de.acegen.aceGen.ClientAttribute;
import de.acegen.aceGen.ClientGivenRef;
import de.acegen.aceGen.ClientScenario;
import de.acegen.aceGen.ClientThenBlock;
import de.acegen.aceGen.ClientWhenBlock;
import de.acegen.aceGen.ClientWhenThen;
import de.acegen.aceGen.Count;
import de.acegen.aceGen.CustomCall;
import de.acegen.aceGen.CustomVerification;
import de.acegen.aceGen.DataDefinition;
import de.acegen.aceGen.Extraction;
import de.acegen.aceGen.FromAppStateRef;
import de.acegen.aceGen.GivenRef;
import de.acegen.aceGen.HttpClient;
import de.acegen.aceGen.HttpClientAce;
import de.acegen.aceGen.HttpClientOutcome;
import de.acegen.aceGen.HttpClientStateFunction;
import de.acegen.aceGen.HttpServer;
import de.acegen.aceGen.HttpServerAceRead;
import de.acegen.aceGen.HttpServerAceWrite;
import de.acegen.aceGen.HttpServerOutcome;
import de.acegen.aceGen.HttpServerView;
import de.acegen.aceGen.HttpServerViewFunction;
import de.acegen.aceGen.Input;
import de.acegen.aceGen.InputValue;
import de.acegen.aceGen.JsonArray;
import de.acegen.aceGen.JsonArrayClient;
import de.acegen.aceGen.JsonDateTime;
import de.acegen.aceGen.JsonMember;
import de.acegen.aceGen.JsonMemberClient;
import de.acegen.aceGen.JsonObjectAce;
import de.acegen.aceGen.JsonObjectClient;
import de.acegen.aceGen.LongType;
import de.acegen.aceGen.Model;
import de.acegen.aceGen.NullType;
import de.acegen.aceGen.PersistenceVerification;
import de.acegen.aceGen.PrimitiveValue;
import de.acegen.aceGen.Project;
import de.acegen.aceGen.Scenario;
import de.acegen.aceGen.SelectByExpectation;
import de.acegen.aceGen.SelectByPrimaryKeys;
import de.acegen.aceGen.SelectByUniqueAttribute;
import de.acegen.aceGen.SquishyValue;
import de.acegen.aceGen.StateVerification;
import de.acegen.aceGen.StringType;
import de.acegen.aceGen.ThenBlock;
import de.acegen.aceGen.TriggerdAceOperation;
import de.acegen.aceGen.UiAction;
import de.acegen.aceGen.UndefinedType;
import de.acegen.aceGen.Verification;
import de.acegen.aceGen.WhenBlock;
import de.acegen.aceGen.WhenThen;
import de.acegen.services.AceGenGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AceGenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AceGenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AceGenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AceGenPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case AceGenPackage.ATTRIBUTE_AND_VALUE:
				sequence_AttributeAndValue(context, (AttributeAndValue) semanticObject); 
				return; 
			case AceGenPackage.ATTRIBUTE_PARAM_REF:
				sequence_AttributeParamRef(context, (AttributeParamRef) semanticObject); 
				return; 
			case AceGenPackage.AUTH_USER:
				sequence_AuthUser(context, (AuthUser) semanticObject); 
				return; 
			case AceGenPackage.AUTHORIZATION:
				sequence_Authorization(context, (Authorization) semanticObject); 
				return; 
			case AceGenPackage.BOOLEAN_TYPE:
				sequence_BooleanType(context, (BooleanType) semanticObject); 
				return; 
			case AceGenPackage.CLIENT_ATTRIBUTE:
				sequence_ClientAttribute(context, (ClientAttribute) semanticObject); 
				return; 
			case AceGenPackage.CLIENT_GIVEN_REF:
				sequence_ClientGivenRef(context, (ClientGivenRef) semanticObject); 
				return; 
			case AceGenPackage.CLIENT_SCENARIO:
				sequence_ClientScenario(context, (ClientScenario) semanticObject); 
				return; 
			case AceGenPackage.CLIENT_THEN_BLOCK:
				sequence_ClientThenBlock(context, (ClientThenBlock) semanticObject); 
				return; 
			case AceGenPackage.CLIENT_WHEN_BLOCK:
				sequence_ClientWhenBlock(context, (ClientWhenBlock) semanticObject); 
				return; 
			case AceGenPackage.CLIENT_WHEN_THEN:
				sequence_ClientWhenThen(context, (ClientWhenThen) semanticObject); 
				return; 
			case AceGenPackage.COUNT:
				sequence_Count(context, (Count) semanticObject); 
				return; 
			case AceGenPackage.CUSTOM_CALL:
				sequence_CustomCall(context, (CustomCall) semanticObject); 
				return; 
			case AceGenPackage.CUSTOM_VERIFICATION:
				sequence_CustomVerification(context, (CustomVerification) semanticObject); 
				return; 
			case AceGenPackage.DATA_DEFINITION:
				sequence_DataDefinition(context, (DataDefinition) semanticObject); 
				return; 
			case AceGenPackage.EXTRACTION:
				sequence_Extraction(context, (Extraction) semanticObject); 
				return; 
			case AceGenPackage.FROM_APP_STATE_REF:
				sequence_FromAppStateRef(context, (FromAppStateRef) semanticObject); 
				return; 
			case AceGenPackage.GIVEN_REF:
				sequence_GivenRef(context, (GivenRef) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT:
				sequence_HttpClient(context, (HttpClient) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_ACE:
				sequence_HttpClientAce(context, (HttpClientAce) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_OUTCOME:
				sequence_HttpClientOutcome(context, (HttpClientOutcome) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_STATE_FUNCTION:
				sequence_HttpClientStateFunction(context, (HttpClientStateFunction) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER:
				sequence_HttpServer(context, (HttpServer) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_ACE_READ:
				sequence_HttpServerAceRead(context, (HttpServerAceRead) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_ACE_WRITE:
				sequence_HttpServerAceWrite(context, (HttpServerAceWrite) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_OUTCOME:
				sequence_HttpServerOutcome(context, (HttpServerOutcome) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_VIEW:
				sequence_HttpServerView(context, (HttpServerView) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_VIEW_FUNCTION:
				sequence_HttpServerViewFunction(context, (HttpServerViewFunction) semanticObject); 
				return; 
			case AceGenPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case AceGenPackage.INPUT_VALUE:
				sequence_InputValue(context, (InputValue) semanticObject); 
				return; 
			case AceGenPackage.JSON_ARRAY:
				sequence_JsonArray(context, (JsonArray) semanticObject); 
				return; 
			case AceGenPackage.JSON_ARRAY_CLIENT:
				sequence_JsonArrayClient(context, (JsonArrayClient) semanticObject); 
				return; 
			case AceGenPackage.JSON_DATE_TIME:
				sequence_JsonDateTime(context, (JsonDateTime) semanticObject); 
				return; 
			case AceGenPackage.JSON_MEMBER:
				sequence_JsonMember(context, (JsonMember) semanticObject); 
				return; 
			case AceGenPackage.JSON_MEMBER_CLIENT:
				sequence_JsonMemberClient(context, (JsonMemberClient) semanticObject); 
				return; 
			case AceGenPackage.JSON_OBJECT_ACE:
				sequence_JsonObjectAce(context, (JsonObjectAce) semanticObject); 
				return; 
			case AceGenPackage.JSON_OBJECT_CLIENT:
				sequence_JsonObjectClient(context, (JsonObjectClient) semanticObject); 
				return; 
			case AceGenPackage.LONG_TYPE:
				sequence_LongType(context, (LongType) semanticObject); 
				return; 
			case AceGenPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AceGenPackage.NULL_TYPE:
				sequence_NullType(context, (NullType) semanticObject); 
				return; 
			case AceGenPackage.PERSISTENCE_VERIFICATION:
				sequence_PersistenceVerification(context, (PersistenceVerification) semanticObject); 
				return; 
			case AceGenPackage.PRIMITIVE_VALUE:
				sequence_PrimitiveValue(context, (PrimitiveValue) semanticObject); 
				return; 
			case AceGenPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case AceGenPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case AceGenPackage.SELECT_BY_EXPECTATION:
				sequence_SelectByExpectation(context, (SelectByExpectation) semanticObject); 
				return; 
			case AceGenPackage.SELECT_BY_PRIMARY_KEYS:
				sequence_SelectByPrimaryKeys(context, (SelectByPrimaryKeys) semanticObject); 
				return; 
			case AceGenPackage.SELECT_BY_UNIQUE_ATTRIBUTE:
				sequence_SelectByUniqueAttribute(context, (SelectByUniqueAttribute) semanticObject); 
				return; 
			case AceGenPackage.SQUISHY_VALUE:
				sequence_SquishyValue(context, (SquishyValue) semanticObject); 
				return; 
			case AceGenPackage.STATE_VERIFICATION:
				sequence_StateVerification(context, (StateVerification) semanticObject); 
				return; 
			case AceGenPackage.STRING_TYPE:
				sequence_StringType(context, (StringType) semanticObject); 
				return; 
			case AceGenPackage.THEN_BLOCK:
				sequence_ThenBlock(context, (ThenBlock) semanticObject); 
				return; 
			case AceGenPackage.TRIGGERD_ACE_OPERATION:
				sequence_TriggerdAceOperation(context, (TriggerdAceOperation) semanticObject); 
				return; 
			case AceGenPackage.UI_ACTION:
				sequence_UiAction(context, (UiAction) semanticObject); 
				return; 
			case AceGenPackage.UNDEFINED_TYPE:
				sequence_UndefinedType(context, (UndefinedType) semanticObject); 
				return; 
			case AceGenPackage.VERIFICATION:
				sequence_Verification(context, (Verification) semanticObject); 
				return; 
			case AceGenPackage.WHEN_BLOCK:
				sequence_WhenBlock(context, (WhenBlock) semanticObject); 
				return; 
			case AceGenPackage.WHEN_THEN:
				sequence_WhenThen(context, (WhenThen) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeAndValue returns AttributeAndValue
	 *
	 * Constraint:
	 *     (attribute=[Attribute|QualifiedName] value=PrimitiveValue)
	 * </pre>
	 */
	protected void sequence_AttributeAndValue(ISerializationContext context, AttributeAndValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.ATTRIBUTE_AND_VALUE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.ATTRIBUTE_AND_VALUE__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.ATTRIBUTE_AND_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.ATTRIBUTE_AND_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAndValueAccess().getAttributeAttributeQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(AceGenPackage.Literals.ATTRIBUTE_AND_VALUE__ATTRIBUTE, false));
		feeder.accept(grammarAccess.getAttributeAndValueAccess().getValuePrimitiveValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeParamRef returns AttributeParamRef
	 *
	 * Constraint:
	 *     (notNull?='NotNull'? attribute=[Attribute|QualifiedName])
	 * </pre>
	 */
	protected void sequence_AttributeParamRef(ISerializationContext context, AttributeParamRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         unique?='Unique'? 
	 *         primaryKey?='PrimaryKey'? 
	 *         notNull?='NotNull'? 
	 *         list?='List'? 
	 *         (type=Type | model=[Model|QualifiedName]) 
	 *         name=ID 
	 *         foreignKey=[Attribute|QualifiedName]? 
	 *         squishy?='squishy'?
	 *     )
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AuthUser returns AuthUser
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_AuthUser(ISerializationContext context, AuthUser semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Authorization returns Authorization
	 *
	 * Constraint:
	 *     (username=STRING password=STRING)
	 * </pre>
	 */
	protected void sequence_Authorization(ISerializationContext context, Authorization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.AUTHORIZATION__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.AUTHORIZATION__USERNAME));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.AUTHORIZATION__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.AUTHORIZATION__PASSWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAuthorizationAccess().getUsernameSTRINGTerminalRuleCall_1_0(), semanticObject.getUsername());
		feeder.accept(grammarAccess.getAuthorizationAccess().getPasswordSTRINGTerminalRuleCall_3_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValueClient returns BooleanType
	 *     JsonValue returns BooleanType
	 *     BooleanType returns BooleanType
	 *
	 * Constraint:
	 *     boolean=JsonBoolean
	 * </pre>
	 */
	protected void sequence_BooleanType(ISerializationContext context, BooleanType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.BOOLEAN_TYPE__BOOLEAN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.BOOLEAN_TYPE__BOOLEAN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanTypeAccess().getBooleanJsonBooleanParserRuleCall_0(), semanticObject.getBoolean());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClientAttribute returns ClientAttribute
	 *
	 * Constraint:
	 *     (
	 *         noComponent?='noComponent'? 
	 *         list?='List'? 
	 *         tree?='Tree'? 
	 *         group?='group'? 
	 *         listId?='listId'? 
	 *         name=ID 
	 *         location?='location'? 
	 *         storage?='storage'? 
	 *         fromParent?='fromParent'? 
	 *         uiElement=UIElement? 
	 *         attributes+=ClientAttribute* 
	 *         options+=STRING* 
	 *         actions+=UiAction*
	 *     )
	 * </pre>
	 */
	protected void sequence_ClientAttribute(ISerializationContext context, ClientAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClientGivenRef returns ClientGivenRef
	 *
	 * Constraint:
	 *     (scenario=[ClientScenario|QualifiedName] excludeGiven?='exclude'?)
	 * </pre>
	 */
	protected void sequence_ClientGivenRef(ISerializationContext context, ClientGivenRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClientScenario returns ClientScenario
	 *
	 * Constraint:
	 *     (name=ID givenRefs+=ClientGivenRef* clientWhenThen+=ClientWhenThen clientWhenThen+=ClientWhenThen*)
	 * </pre>
	 */
	protected void sequence_ClientScenario(ISerializationContext context, ClientScenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClientThenBlock returns ClientThenBlock
	 *
	 * Constraint:
	 *     (stateVerifications+=StateVerification* verifications+=CustomVerification*)
	 * </pre>
	 */
	protected void sequence_ClientThenBlock(ISerializationContext context, ClientThenBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClientWhenBlock returns ClientWhenBlock
	 *
	 * Constraint:
	 *     (
	 *         action=[HttpClientAce|QualifiedName] 
	 *         (inputValues+=InputValue inputValues+=InputValue*)? 
	 *         (squishyValues+=SquishyValue squishyValues+=SquishyValue*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ClientWhenBlock(ISerializationContext context, ClientWhenBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClientWhenThen returns ClientWhenThen
	 *
	 * Constraint:
	 *     (whenBlock=ClientWhenBlock? delayInMillis=INT? thenBlock=ClientThenBlock?)
	 * </pre>
	 */
	protected void sequence_ClientWhenThen(ISerializationContext context, ClientWhenThen semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PersistenceVerificationExpression returns Count
	 *     Count returns Count
	 *
	 * Constraint:
	 *     (attributeAndValues+=AttributeAndValue attributeAndValues+=AttributeAndValue* expected=INT)
	 * </pre>
	 */
	protected void sequence_Count(ISerializationContext context, Count semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Given returns CustomCall
	 *     CustomCall returns CustomCall
	 *
	 * Constraint:
	 *     (customCallName=ID (values+=PrimitiveValue values+=PrimitiveValue*)? times=INT?)
	 * </pre>
	 */
	protected void sequence_CustomCall(ISerializationContext context, CustomCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CustomVerification returns CustomVerification
	 *
	 * Constraint:
	 *     (functionName=ID stateRef=[ClientAttribute|QualifiedName]?)
	 * </pre>
	 */
	protected void sequence_CustomVerification(ISerializationContext context, CustomVerification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DataDefinition returns DataDefinition
	 *
	 * Constraint:
	 *     (uuid=STRING? (systemtime=STRING pattern=STRING)? data=JsonObject?)
	 * </pre>
	 */
	protected void sequence_DataDefinition(ISerializationContext context, DataDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Extraction returns Extraction
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Extraction(ISerializationContext context, Extraction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.EXTRACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.EXTRACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtractionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FromAppStateRef returns FromAppStateRef
	 *
	 * Constraint:
	 *     (stateElement=[ClientAttribute|QualifiedName] varName=ID?)
	 * </pre>
	 */
	protected void sequence_FromAppStateRef(ISerializationContext context, FromAppStateRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Given returns GivenRef
	 *     GivenRef returns GivenRef
	 *
	 * Constraint:
	 *     (scenario=[Scenario|QualifiedName] times=INT? excludeGiven?='exclude'?)
	 * </pre>
	 */
	protected void sequence_GivenRef(ISerializationContext context, GivenRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpClientAce returns HttpClientAce
	 *
	 * Constraint:
	 *     (
	 *         async?='async'? 
	 *         name=ID 
	 *         (input+=Input input+=Input*)? 
	 *         (refs+=FromAppStateRef refs+=FromAppStateRef*)? 
	 *         serverCall=[HttpServerAce|QualifiedName]? 
	 *         (loadingIndicators+=[ClientAttribute|QualifiedName] loadingIndicators+=[ClientAttribute|QualifiedName]*)? 
	 *         outcomes+=HttpClientOutcome*
	 *     )
	 * </pre>
	 */
	protected void sequence_HttpClientAce(ISerializationContext context, HttpClientAce semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpClientOutcome returns HttpClientOutcome
	 *
	 * Constraint:
	 *     (name=ID listeners+=HttpClientStateFunction* triggerdAceOperations+=TriggerdAceOperation*)
	 * </pre>
	 */
	protected void sequence_HttpClientOutcome(ISerializationContext context, HttpClientOutcome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpClientStateFunction returns HttpClientStateFunction
	 *
	 * Constraint:
	 *     (stateFunctionType=HttpClientStateFunctionType stateElement=[ClientAttribute|QualifiedName])
	 * </pre>
	 */
	protected void sequence_HttpClientStateFunction(ISerializationContext context, HttpClientStateFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__STATE_FUNCTION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__STATE_FUNCTION_TYPE));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__STATE_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__STATE_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHttpClientStateFunctionAccess().getStateFunctionTypeHttpClientStateFunctionTypeParserRuleCall_0_0(), semanticObject.getStateFunctionType());
		feeder.accept(grammarAccess.getHttpClientStateFunctionAccess().getStateElementClientAttributeQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__STATE_ELEMENT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpClient returns HttpClient
	 *
	 * Constraint:
	 *     (name=QualifiedName aceOperations+=HttpClientAce* (jsx?='JSX'? container=ClientAttribute)? scenarios+=ClientScenario*)
	 * </pre>
	 */
	protected void sequence_HttpClient(ISerializationContext context, HttpClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpServerAce returns HttpServerAceRead
	 *     HttpServerAceRead returns HttpServerAceRead
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         model=[Model|QualifiedName] 
	 *         type=ReadFunctionType 
	 *         url=STRING 
	 *         authorize?='authorize'? 
	 *         pathParams+=AttributeParamRef* 
	 *         queryParams+=AttributeParamRef* 
	 *         payload+=AttributeParamRef* 
	 *         response+=[Attribute|QualifiedName]*
	 *     )
	 * </pre>
	 */
	protected void sequence_HttpServerAceRead(ISerializationContext context, HttpServerAceRead semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpServerAce returns HttpServerAceWrite
	 *     HttpServerAceWrite returns HttpServerAceWrite
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         model=[Model|QualifiedName] 
	 *         type=WriteFunctionType 
	 *         url=STRING 
	 *         authorize?='authorize'? 
	 *         multipartFormData?='multipartFormData'? 
	 *         pathParams+=AttributeParamRef* 
	 *         queryParams+=AttributeParamRef* 
	 *         payload+=AttributeParamRef* 
	 *         response+=[Attribute|QualifiedName]* 
	 *         outcomes+=HttpServerOutcome*
	 *     )
	 * </pre>
	 */
	protected void sequence_HttpServerAceWrite(ISerializationContext context, HttpServerAceWrite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpServerOutcome returns HttpServerOutcome
	 *
	 * Constraint:
	 *     (name=ID listeners+=[HttpServerViewFunction|QualifiedName]*)
	 * </pre>
	 */
	protected void sequence_HttpServerOutcome(ISerializationContext context, HttpServerOutcome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpServerViewFunction returns HttpServerViewFunction
	 *
	 * Constraint:
	 *     (name=ID model=[Model|QualifiedName])
	 * </pre>
	 */
	protected void sequence_HttpServerViewFunction(ISerializationContext context, HttpServerViewFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__MODEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHttpServerViewFunctionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHttpServerViewFunctionAccess().getModelModelQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__MODEL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpServerView returns HttpServerView
	 *
	 * Constraint:
	 *     (afterCommit?='afterCommit'? name=ID renderFunctions+=HttpServerViewFunction*)
	 * </pre>
	 */
	protected void sequence_HttpServerView(ISerializationContext context, HttpServerView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HttpServer returns HttpServer
	 *
	 * Constraint:
	 *     (
	 *         java?='Java'? 
	 *         cs?='C#'? 
	 *         dropwizard?='Dropwizard'? 
	 *         dotnet?='NET6'? 
	 *         JDBI3?='JDBI3'? 
	 *         EF?='EntityFramework'? 
	 *         liquibase?='Liquibase'? 
	 *         name=QualifiedName 
	 *         authUser=AuthUser? 
	 *         authUserRef=[AuthUser|QualifiedName]? 
	 *         aceOperations+=HttpServerAce* 
	 *         views+=HttpServerView* 
	 *         models+=Model* 
	 *         scenarios+=Scenario*
	 *     )
	 * </pre>
	 */
	protected void sequence_HttpServer(ISerializationContext context, HttpServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InputValue returns InputValue
	 *
	 * Constraint:
	 *     (input=[Input|QualifiedName] value=PrimitiveValue)
	 * </pre>
	 */
	protected void sequence_InputValue(ISerializationContext context, InputValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.INPUT_VALUE__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.INPUT_VALUE__INPUT));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.INPUT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.INPUT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputValueAccess().getInputInputQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(AceGenPackage.Literals.INPUT_VALUE__INPUT, false));
		feeder.accept(grammarAccess.getInputValueAccess().getValuePrimitiveValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Input returns Input
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.INPUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.INPUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValueClient returns JsonArrayClient
	 *     JsonArrayClient returns JsonArrayClient
	 *
	 * Constraint:
	 *     (values+=JsonValueClient? values+=JsonValueClient*)
	 * </pre>
	 */
	protected void sequence_JsonArrayClient(ISerializationContext context, JsonArrayClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValue returns JsonArray
	 *     JsonArray returns JsonArray
	 *
	 * Constraint:
	 *     (values+=JsonValue? values+=JsonValue*)
	 * </pre>
	 */
	protected void sequence_JsonArray(ISerializationContext context, JsonArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValueClient returns JsonDateTime
	 *     JsonValue returns JsonDateTime
	 *     JsonDateTime returns JsonDateTime
	 *
	 * Constraint:
	 *     (dateTime=STRING pattern=STRING)
	 * </pre>
	 */
	protected void sequence_JsonDateTime(ISerializationContext context, JsonDateTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.JSON_DATE_TIME__DATE_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.JSON_DATE_TIME__DATE_TIME));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.JSON_DATE_TIME__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.JSON_DATE_TIME__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDateTimeAccess().getDateTimeSTRINGTerminalRuleCall_0_0(), semanticObject.getDateTime());
		feeder.accept(grammarAccess.getJsonDateTimeAccess().getPatternSTRINGTerminalRuleCall_1_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonMemberClient returns JsonMemberClient
	 *
	 * Constraint:
	 *     (attribute=[ClientAttribute|QualifiedName] value=JsonValueClient)
	 * </pre>
	 */
	protected void sequence_JsonMemberClient(ISerializationContext context, JsonMemberClient semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.JSON_MEMBER_CLIENT__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.JSON_MEMBER_CLIENT__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.JSON_MEMBER_CLIENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.JSON_MEMBER_CLIENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonMemberClientAccess().getAttributeClientAttributeQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(AceGenPackage.Literals.JSON_MEMBER_CLIENT__ATTRIBUTE, false));
		feeder.accept(grammarAccess.getJsonMemberClientAccess().getValueJsonValueClientParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonMember returns JsonMember
	 *
	 * Constraint:
	 *     (attribute=[Attribute|QualifiedName] value=JsonValue)
	 * </pre>
	 */
	protected void sequence_JsonMember(ISerializationContext context, JsonMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.JSON_MEMBER__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.JSON_MEMBER__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.JSON_MEMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.JSON_MEMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonMemberAccess().getAttributeAttributeQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(AceGenPackage.Literals.JSON_MEMBER__ATTRIBUTE, false));
		feeder.accept(grammarAccess.getJsonMemberAccess().getValueJsonValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonObject returns JsonObjectAce
	 *     JsonObjectAce returns JsonObjectAce
	 *     JsonValue returns JsonObjectAce
	 *
	 * Constraint:
	 *     (members+=JsonMember? members+=JsonMember*)
	 * </pre>
	 */
	protected void sequence_JsonObjectAce(ISerializationContext context, JsonObjectAce semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonObjectClient returns JsonObjectClient
	 *     JsonValueClient returns JsonObjectClient
	 *
	 * Constraint:
	 *     (members+=JsonMemberClient? members+=JsonMemberClient*)
	 * </pre>
	 */
	protected void sequence_JsonObjectClient(ISerializationContext context, JsonObjectClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValueClient returns LongType
	 *     JsonValue returns LongType
	 *     LongType returns LongType
	 *
	 * Constraint:
	 *     long=INT
	 * </pre>
	 */
	protected void sequence_LongType(ISerializationContext context, LongType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.LONG_TYPE__LONG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.LONG_TYPE__LONG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLongTypeAccess().getLongINTTerminalRuleCall_0(), semanticObject.getLong());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (persistent?='persistent'? name=ID (superModels+=[Model|QualifiedName] superModels+=[Model|QualifiedName]*)? attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValueClient returns NullType
	 *     JsonValue returns NullType
	 *     NullType returns NullType
	 *
	 * Constraint:
	 *     null?='null'
	 * </pre>
	 */
	protected void sequence_NullType(ISerializationContext context, NullType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.NULL_TYPE__NULL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.NULL_TYPE__NULL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullTypeAccess().getNullNullKeyword_0(), semanticObject.isNull());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PersistenceVerification returns PersistenceVerification
	 *
	 * Constraint:
	 *     (name=ID model=[Model|QualifiedName] expression=PersistenceVerificationExpression)
	 * </pre>
	 */
	protected void sequence_PersistenceVerification(ISerializationContext context, PersistenceVerification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.PERSISTENCE_VERIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.PERSISTENCE_VERIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.PERSISTENCE_VERIFICATION__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.PERSISTENCE_VERIFICATION__MODEL));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.PERSISTENCE_VERIFICATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.PERSISTENCE_VERIFICATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersistenceVerificationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPersistenceVerificationAccess().getModelModelQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(AceGenPackage.Literals.PERSISTENCE_VERIFICATION__MODEL, false));
		feeder.accept(grammarAccess.getPersistenceVerificationAccess().getExpressionPersistenceVerificationExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PrimitiveValue returns PrimitiveValue
	 *
	 * Constraint:
	 *     (string=STRING | long=INT)
	 * </pre>
	 */
	protected void sequence_PrimitiveValue(ISerializationContext context, PrimitiveValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (httpClient=HttpClient | httpServer=HttpServer)?
	 * </pre>
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (name=ID givenItems+=Given* whenThen+=WhenThen whenThen+=WhenThen*)
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SelectByExpectation returns SelectByExpectation
	 *
	 * Constraint:
	 *     (object=JsonObject | isNotNull?='notNull' | isNull?='null')
	 * </pre>
	 */
	protected void sequence_SelectByExpectation(ISerializationContext context, SelectByExpectation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PersistenceVerificationExpression returns SelectByPrimaryKeys
	 *     SelectByPrimaryKeys returns SelectByPrimaryKeys
	 *
	 * Constraint:
	 *     (attributeAndValues+=AttributeAndValue attributeAndValues+=AttributeAndValue* expected=SelectByExpectation)
	 * </pre>
	 */
	protected void sequence_SelectByPrimaryKeys(ISerializationContext context, SelectByPrimaryKeys semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PersistenceVerificationExpression returns SelectByUniqueAttribute
	 *     SelectByUniqueAttribute returns SelectByUniqueAttribute
	 *
	 * Constraint:
	 *     (attributeAndValue=AttributeAndValue expected=SelectByExpectation)
	 * </pre>
	 */
	protected void sequence_SelectByUniqueAttribute(ISerializationContext context, SelectByUniqueAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.SELECT_BY_UNIQUE_ATTRIBUTE__ATTRIBUTE_AND_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.SELECT_BY_UNIQUE_ATTRIBUTE__ATTRIBUTE_AND_VALUE));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.SELECT_BY_UNIQUE_ATTRIBUTE__EXPECTED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.SELECT_BY_UNIQUE_ATTRIBUTE__EXPECTED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectByUniqueAttributeAccess().getAttributeAndValueAttributeAndValueParserRuleCall_2_0(), semanticObject.getAttributeAndValue());
		feeder.accept(grammarAccess.getSelectByUniqueAttributeAccess().getExpectedSelectByExpectationParserRuleCall_5_0(), semanticObject.getExpected());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SquishyValue returns SquishyValue
	 *
	 * Constraint:
	 *     (uuid=STRING clientSystemTime=STRING? serverSystemTime=STRING? (attribute=[Attribute|QualifiedName] value=PrimitiveValue)?)?
	 * </pre>
	 */
	protected void sequence_SquishyValue(ISerializationContext context, SquishyValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateVerification returns StateVerification
	 *
	 * Constraint:
	 *     (name=ID stateRef=[ClientAttribute|QualifiedName] not?='not'? value=JsonValueClient)
	 * </pre>
	 */
	protected void sequence_StateVerification(ISerializationContext context, StateVerification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValueClient returns StringType
	 *     JsonObject returns StringType
	 *     JsonValue returns StringType
	 *     StringType returns StringType
	 *
	 * Constraint:
	 *     string=STRING
	 * </pre>
	 */
	protected void sequence_StringType(ISerializationContext context, StringType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.STRING_TYPE__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.STRING_TYPE__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringTypeAccess().getStringSTRINGTerminalRuleCall_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ThenBlock returns ThenBlock
	 *
	 * Constraint:
	 *     (statusCode=INT response=DataDefinition? persistenceVerifications+=PersistenceVerification* verifications+=Verification*)
	 * </pre>
	 */
	protected void sequence_ThenBlock(ISerializationContext context, ThenBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TriggerdAceOperation returns TriggerdAceOperation
	 *
	 * Constraint:
	 *     ((delay=INT takeLatest?='takeLatest'?)? aceOperation=[HttpClientAce|QualifiedName])
	 * </pre>
	 */
	protected void sequence_TriggerdAceOperation(ISerializationContext context, TriggerdAceOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UiAction returns UiAction
	 *
	 * Constraint:
	 *     (name=STRING target=[HttpClientAce|QualifiedName])
	 * </pre>
	 */
	protected void sequence_UiAction(ISerializationContext context, UiAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.UI_ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.UI_ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.UI_ACTION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.UI_ACTION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUiActionAccess().getNameSTRINGTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUiActionAccess().getTargetHttpClientAceQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(AceGenPackage.Literals.UI_ACTION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonValueClient returns UndefinedType
	 *     UndefinedType returns UndefinedType
	 *
	 * Constraint:
	 *     undefined?='undefined'
	 * </pre>
	 */
	protected void sequence_UndefinedType(ISerializationContext context, UndefinedType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.UNDEFINED_TYPE__UNDEFINED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.UNDEFINED_TYPE__UNDEFINED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUndefinedTypeAccess().getUndefinedUndefinedKeyword_0(), semanticObject.isUndefined());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Verification returns Verification
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Verification(ISerializationContext context, Verification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.VERIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.VERIFICATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerificationAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WhenBlock returns WhenBlock
	 *
	 * Constraint:
	 *     (action=[HttpServerAce|QualifiedName] dataDefinition=DataDefinition authorization=Authorization? extractions+=Extraction*)
	 * </pre>
	 */
	protected void sequence_WhenBlock(ISerializationContext context, WhenBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WhenThen returns WhenThen
	 *
	 * Constraint:
	 *     (whenBlock=WhenBlock thenBlock=ThenBlock)
	 * </pre>
	 */
	protected void sequence_WhenThen(ISerializationContext context, WhenThen semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.WHEN_THEN__WHEN_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.WHEN_THEN__WHEN_BLOCK));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.WHEN_THEN__THEN_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.WHEN_THEN__THEN_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhenThenAccess().getWhenBlockWhenBlockParserRuleCall_1_0(), semanticObject.getWhenBlock());
		feeder.accept(grammarAccess.getWhenThenAccess().getThenBlockThenBlockParserRuleCall_3_0(), semanticObject.getThenBlock());
		feeder.finish();
	}
	
	
}
