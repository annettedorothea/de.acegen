/**
 * Copyright (c) 2020 Annette Pohl
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */
package de.acegen.templates.java.scenario;

import de.acegen.extensions.CommonExtension;
import javax.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class BaseScenario {
  @Inject
  @Extension
  private CommonExtension _commonExtension;
  
  public CharSequence generateBaseScenario() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.hamcrest.CoreMatchers.is;");
    _builder.newLine();
    _builder.append("import static org.hamcrest.beans.SamePropertyValuesAs.samePropertyValuesAs;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.text.DecimalFormat;");
    _builder.newLine();
    _builder.append("import java.time.LocalDateTime;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.Base64;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.UUID;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.commons.lang3.StringUtils;");
    _builder.newLine();
    _builder.append("import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;");
    _builder.newLine();
    _builder.append("import org.apache.hc.client5.http.classic.methods.HttpDelete;");
    _builder.newLine();
    _builder.append("import org.apache.hc.client5.http.classic.methods.HttpGet;");
    _builder.newLine();
    _builder.append("import org.apache.hc.client5.http.classic.methods.HttpPost;");
    _builder.newLine();
    _builder.append("import org.apache.hc.client5.http.classic.methods.HttpPut;");
    _builder.newLine();
    _builder.append("import org.apache.hc.client5.http.classic.methods.HttpUriRequest;");
    _builder.newLine();
    _builder.append("import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;");
    _builder.newLine();
    _builder.append("import org.apache.hc.client5.http.impl.classic.HttpClients;");
    _builder.newLine();
    _builder.append("import org.apache.hc.core5.http.ClassicHttpResponse;");
    _builder.newLine();
    _builder.append("import org.apache.hc.core5.http.HttpEntity;");
    _builder.newLine();
    _builder.append("import org.apache.hc.core5.http.io.HttpClientResponseHandler;");
    _builder.newLine();
    _builder.append("import org.apache.hc.core5.http.io.entity.EntityUtils;");
    _builder.newLine();
    _builder.append("import org.apache.hc.core5.http.io.entity.StringEntity;");
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Jdbi;");
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.AfterAll;");
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.AfterEach;");
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.BeforeAll;");
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.BeforeEach;");
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.Test;");
    _builder.newLine();
    _builder.append("import org.junit.platform.runner.JUnitPlatform;");
    _builder.newLine();
    _builder.append("import org.junit.runner.RunWith;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.core.JsonProcessingException;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.DeserializationFeature;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.ObjectMapper;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ch.qos.logback.classic.Level;");
    _builder.newLine();
    _builder.append("import ch.qos.logback.classic.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RunWith(JUnitPlatform.class)");
    _builder.newLine();
    _builder.append("public abstract class BaseScenario extends AbstractBaseScenario {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Logger LOG;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Jdbi jdbi;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static int port;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String host = \"localhost\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String protocol;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String rootPath;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String testId;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static Map<String, DescriptiveStatistics> metrics;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@BeforeAll");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void beforeClass() throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.setLevel(Level.INFO);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ObjectMapper mapper = new ObjectMapper(new YAMLFactory())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("YamlConfiguration config = mapper.readValue(new File(\"dev.yml\"), YamlConfiguration.class);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("port = Integer.parseInt(config.getServer().getApplicationConnectors()[0].getPort());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protocol = config.getServer().getApplicationConnectors()[0].getType();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rootPath = config.getServer().getRootPath();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jdbi = Jdbi.create(config.getDatabase().getUrl());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (metrics == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("metrics = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@AfterAll");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void afterClass() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Object[] actions = metrics.keySet().toArray();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Arrays.sort(actions);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(padRight(\"action\", 25) + padLeft(\"times\", 9) + padLeft(\"mean\", 9) + padLeft(\"std dev\", 9)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ padLeft(\"median\", 9) + padLeft(\"pctl(10)\", 9) + padLeft(\"pctl(90)\", 9) + padLeft(\"min\", 9)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ padLeft(\"max\", 9));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Object action : actions) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DescriptiveStatistics values = metrics.get(action);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.info(padRight(action.toString(), 25) + padLeft(values.getN() + \"\", 9)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ padLeft(format(values.getMean()), 9) + padLeft(format(values.getStandardDeviation()), 9)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ padLeft(format(values.getPercentile(50)), 9)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ padLeft(format(values.getPercentile(10)), 9)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ padLeft(format(values.getPercentile(90)), 9) + padLeft(values.getMin(), 9)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("+ padLeft(values.getMax(), 9));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String padLeft(double d, int n) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return String.format(\"%\" + n + \"s\", new DecimalFormat(\"#\").format(d));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String padLeft(String s, int n) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return String.format(\"%\" + n + \"s\", s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String padRight(String s, int n) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return String.format(\"%-\" + n + \"s\", s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String format(double d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new DecimalFormat(\"0.00\").format(d);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@BeforeEach");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void before() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("daoProvider = new DaoProvider();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("handle = new PersistenceHandle(jdbi.open());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("testId = randomString();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"*********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"********   {} test id {}\", this.scenarioName(), testId);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"*********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@AfterEach");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void after() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("handle.getHandle().close();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void test() throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.runTest();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected <T> HttpResponse<T> httpGet(String path, String authorization, String uuid, Class<T> entityType) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final HttpGet httpGet = new HttpGet(buildUrl(path, uuid));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addHeaders(httpGet, authorization);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return execute(httpGet, entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected <T> HttpResponse<T> httpPost(String path, Object payload, String authorization, String uuid,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<T> entityType) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final HttpPost httpPost = new HttpPost(buildUrl(path, uuid));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addHeaders(httpPost, authorization);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addEntity(httpPost, payload);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return execute(httpPost, entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected <T> HttpResponse<T> httpPut(String path, Object payload, String authorization, String uuid,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<T> entityType) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final HttpPut httpPut = new HttpPut(buildUrl(path, uuid));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addHeaders(httpPut, authorization);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addEntity(httpPut, payload);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return execute(httpPut, entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected <T> HttpResponse<T> httpDelete(String path, String authorization, String uuid, Class<T> entityType) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final HttpDelete httpDelete = new HttpDelete(buildUrl(path, uuid));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addHeaders(httpDelete, authorization);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return execute(httpDelete, entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String buildUrl(String path, String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (StringUtils.isNotBlank(uuid)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (path.contains(\"?\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("path += \"&uuid=\" + uuid;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("path += \"?uuid=\" + uuid;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return String.format(\"%s://%s:%d%s%s\", protocol, host, port, rootPath, path);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void addHeaders(HttpUriRequest request, String authorization) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("request.setHeader(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("request.setHeader(\"Content-type\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (authorization != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("request.addHeader(\"Authorization\", authorization);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void addEntity(HttpUriRequest request, Object payload) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String json = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (payload instanceof String) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("json = payload.toString();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("json = objectMapper.writeValueAsString(payload);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("StringEntity httpEntity = new StringEntity(json);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("request.setEntity(httpEntity);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (JsonProcessingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.error(\"failed to write entity\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private <T> HttpResponse<T> execute(HttpUriRequest request, Class<T> entityType) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try (final CloseableHttpClient httpclient = HttpClients.createDefault()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("long timeBeforeRequest = System.currentTimeMillis();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final HttpClientResponseHandler<HttpResponse<T>> responseHandler = new HttpClientResponseHandler<HttpResponse<T>>() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public HttpResponse<T> handleResponse(final ClassicHttpResponse response) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("long timeAfterRequest = System.currentTimeMillis();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return createHttpResponse(response, entityType, timeAfterRequest - timeBeforeRequest);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return httpclient.execute(request, responseHandler);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new HttpResponse<T>(null, e.getMessage(), -1, 0L);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private <T> HttpResponse<T> createHttpResponse(ClassicHttpResponse response, Class<T> entityType, long duration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int statusCode = response.getCode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String statusMessage = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("T entity = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final int status = response.getCode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final HttpEntity httpEntity = response.getEntity();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (httpEntity != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (status >= 400) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("statusMessage = httpEntity != null ? EntityUtils.toString(httpEntity) : null;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String json = httpEntity != null ? EntityUtils.toString(httpEntity) : null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("entity = objectMapper.readValue(json, entityType);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("response.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (final Exception x) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("statusMessage = x.getMessage();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new HttpResponse<T>(entity, statusMessage, statusCode, duration);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String randomString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return randomUUID().replace(\"-\", \"\").substring(0, 8);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String randomUUID() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return UUID.randomUUID().toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String authorization(String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"<your authorization string>\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void assertThat(int actual, int expected) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.hamcrest.MatcherAssert.assertThat(\"testId: \" + this.getTestId(), actual, is(expected));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void assertFail(String message) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.junit.jupiter.api.Assertions.fail(message);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void assertThat(Object actual, Object expected) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (actual == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("assertIsNull(expected);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("org.hamcrest.MatcherAssert.assertThat(\"testId: \" + this.getTestId(), actual,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("is(samePropertyValuesAs(expected)));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void assertIsNull(Object actual) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.junit.jupiter.api.Assertions.assertNull(actual, \"testId: \" + this.getTestId());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void assertIsNotNull(Object actual) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.junit.jupiter.api.Assertions.assertNotNull(actual, \"testId: \" + this.getTestId());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void assertTrue(boolean b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.junit.jupiter.api.Assertions.assertTrue(b);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void assertFalse(boolean b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("org.junit.jupiter.api.Assertions.assertFalse(b);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected boolean prerequisite(String scenarioName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch (scenarioName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String getTestId() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return testId;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected HttpResponse<Object> callSquishyDataProviderPutValue(String uuid, String key, String value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.httpPut(\"/test/squishy/value?uuid=\" + uuid + \"&key=\" + key + \"&value=\" + value, null, null, null,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Object.class);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected HttpResponse<Object> callSquishyDataProviderPutSystemTime(String uuid, LocalDateTime dateTime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.httpPut(\"/test/squishy/system-time?uuid=\" + uuid + \"&system-time=\" + dateTime, null, null,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("null, Object.class);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void addToMetrics(String action, Long duration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DescriptiveStatistics values = metrics.get(action);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (values == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("values = new DescriptiveStatistics();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("metrics.put(action, values);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("values.addValue(duration);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("values = metrics.get(\"all\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (values == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("values = new DescriptiveStatistics();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("metrics.put(\"all\", values);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("values.addValue(duration);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAbstractBaseScenario() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.ObjectMapper;");
    _builder.newLine();
    _builder.append("import java.time.LocalDateTime;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class AbstractBaseScenario {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected final ObjectMapper mapper = new ObjectMapper();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected DaoProvider daoProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected PersistenceHandle handle;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected ObjectMapper objectMapper;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Map<String, Object> extractedValues = new HashMap<String, Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AbstractBaseScenario() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("objectMapper = new ObjectMapper();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void runTest() throws Exception;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract <T> HttpResponse<T> httpGet(String path, String authorization, String uuid, Class<T> entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract <T> HttpResponse<T> httpPost(String path, Object payload, String authorization, String uuid, Class<T> entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract <T> HttpResponse<T> httpPut(String path, Object payload, String authorization, String uuid, Class<T> entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract <T> HttpResponse<T> httpDelete(String path, String authorization, String uuid, Class<T> entityType);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract String randomString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract String randomUUID();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract String authorization(String username, String password);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void assertThat(int actual, int expected);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void assertThat(Object actual, Object expected);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void assertIsNull(Object actual);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void assertIsNotNull(Object actual);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void assertFail(String message);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void assertTrue(boolean b);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void assertFalse(boolean b);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract String scenarioName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract String getTestId();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract boolean prerequisite(String scenarioName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract HttpResponse<Object> callSquishyDataProviderPutValue(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String uuid, String key, String data);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract HttpResponse<Object> callSquishyDataProviderPutSystemTime(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String uuid, LocalDateTime dateTime);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract void addToMetrics(String action, Long duration);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTestLogger() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Optional;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.extension.ExtensionContext;");
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.extension.TestWatcher;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TestLogger implements TestWatcher {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(TestLogger.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testDisabled(ExtensionContext context, Optional<String> reason) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"DISABLED {}\", reason.orElse(\"\"));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"*********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testSuccessful(ExtensionContext context) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"SUCCESS\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"*********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testAborted(ExtensionContext context, Throwable cause) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.error(\"ABORTED\", cause);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.error(\"*********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testFailed(ExtensionContext context, Throwable cause) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.error(\"FAILED\", cause);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.error(\"*********************************************************************************\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHttpResponse() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class HttpResponse<T> {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private T entity;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String statusMessage;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int statusCode;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private long duration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HttpResponse(T entity, String statusMessage, int statusCode, long duration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.entity = entity;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.statusMessage = statusMessage;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.statusCode = statusCode;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.duration = duration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public T getEntity() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return entity;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getStatusMessage() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return statusMessage;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getStatusCode() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return statusCode;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public long getDuration() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return duration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
}
