/**
 * Copyright (c) 2020 Annette Pohl
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */
package de.acegen.templates.es6;

import de.acegen.aceGen.HttpClient;
import de.acegen.extensions.CommonExtension;
import javax.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class AceTemplate {
  @Inject
  @Extension
  private CommonExtension _commonExtension;
  
  public CharSequence generateAppUtilsStub() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("export let settings;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function get(path) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function getHash() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function getStorage(path) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function verifyGroups(groupVerifications) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function set(data, path, groupVerifications, attributes) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function setHash(data, path) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function setStorage(data, path) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function merge(data, path, groupVerifications, attributes) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function mergeHash(data, path) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function mergeStorage(data, path) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function createInitialAppState() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function setInitialAppState(initialAppState) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function initEventListeners() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function startApp() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function startReplay() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function httpGet(url, uuid, authorize) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function httpPost(url, uuid, authorize, data) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function httpPut(url, uuid, authorize, data) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function httpDelete(url, uuid, authorize, data) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function createUUID() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function displayUnexpectedError(error) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function deepCopy(object) {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function stateUpdated() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function renderApp() {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateApp(final HttpClient httpClient) {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import * as AppUtils from \"./app/AppUtils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export * from \"../gen/ace/Timeline\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function dumpAppState() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("console.info(AppUtils.get([]));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("AppUtils.initEventListeners();");
    _builder.newLine();
    _builder.append("AppUtils.startApp();");
    _builder.newLine();
    _builder.append("AppUtils.renderApp();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// for Selenium tests");
    _builder.newLine();
    _builder.append("export function getAppState() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return AppUtils.get([])");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function addSquishyValueClient(value) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("let squishyValues = JSON.parse(localStorage.getItem(\'squishyValues\'));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!squishyValues) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("squishyValues = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("squishyValues.push(value);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("localStorage.setItem(\'squishyValues\', JSON.stringify(squishyValues));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function addSquishyValueServer(uuid, key, value) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Promise(() => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let url = \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (key === \"system-time\") {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("url =`/api/test/squishy/system-time?uuid=${uuid}&system-time=${value}`;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("url =`/api/test/squishy/value?uuid=${uuid}&key=${key}&value=${value}`");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AppUtils.httpPut(url).then(() => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateACEController() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import * as AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import Event from \"./Event\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export let timeline = [];");
    _builder.newLine();
    _builder.append("export let listeners = {};");
    _builder.newLine();
    _builder.append("export let delayedActions = {};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("let actionQueue = [];");
    _builder.newLine();
    _builder.append("let triggeredActionsQueue = [];");
    _builder.newLine();
    _builder.append("let idle = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function registerListener(eventName, listener) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!eventName.trim()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new Error(\'cannot register listener for empty eventName\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!listener) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw new Error(\'cannot register undefined listener for event \' + eventName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("let listenersForEventName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (listeners[eventName] === undefined) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listeners[eventName] = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("listenersForEventName = listeners[eventName];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("listenersForEventName.push(listener);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function addItemToTimeLine(item) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (AppUtils.settings && AppUtils.settings.timelineSize > 0) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("timeline.push(AppUtils.deepCopy(item));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (timeline.length > AppUtils.settings.timelineSize) {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("timeline.shift();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("while (timeline.length > 0 && timeline.length > 0 && !timeline[0].appState) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("timeline.shift();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function addActionToQueue(action) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("actionQueue.push(action);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("applyNextActions();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function addActionToTriggeredActionsQueue(action, data) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("triggeredActionsQueue.push({action, data});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (idle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("applyNextActions();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function applyNextActions() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("idle = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("let nextAction = actionQueue.shift();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (nextAction) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (nextAction.action.asynchronous) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nextAction.action.applyAction(nextAction.data).then(() => {");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("if (nextAction.action.callback) {");
    _builder.newLine();
    _builder.append("            \t\t");
    _builder.append("nextAction.action.callback(nextAction.callback);");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("applyNextActions();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("AppUtils.displayUnexpectedError(error);");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("applyNextActions();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("nextAction.action.applyAction(nextAction.data);");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("applyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch(error) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("AppUtils.displayUnexpectedError(error);");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("applyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("let nextTriggeredAction = triggeredActionsQueue.shift();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (nextTriggeredAction) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("nextTriggeredAction.action.apply(nextTriggeredAction.data);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("nextTriggeredAction = triggeredActionsQueue.shift();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("idle = true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function startReplay(timeline, pauseInMillis) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("AppUtils.startReplay();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("let events = [];");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("let appStateWasSet = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for (let i = 0; i < timeline.length; i++) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let item = timeline[i];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.event && appStateWasSet && item.event.eventName !== \"TriggerAction\") {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("events.push({");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("event: new Event(item.event.eventName),");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("data: item.event.data");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (item.appState && !appStateWasSet) {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("AppUtils.setInitialAppState(item.appState);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AppUtils.stateUpdated();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("appStateWasSet = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("console.info(`replay ${events.length} events`);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function replayNextEvent(events, pauseInMillis) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("let nextEvent = events.shift();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (nextEvent) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("console.info(\"replay\", nextEvent);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("nextEvent.event.replay(nextEvent.data);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("AppUtils.stateUpdated();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setTimeout(() => finishReplay(), pauseInMillis);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function finishReplay() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("console.info(\"replay finished\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("timeline = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("actionQueue = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("AppUtils.createInitialAppState();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("AppUtils.startApp();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTimeline() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import * as AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import * as ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.append("import * as Utils from \"./Utils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function replayTimeline(timelineId, pauseInMillis = 100) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (pauseInMillis < 100) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pauseInMillis = 100;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Utils.loadTimeline(timelineId).then((scenario) => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AppUtils.createInitialAppState();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.startReplay(JSON.parse(scenario.timeline), pauseInMillis)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function saveTimeline(description, creator) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Utils.saveTimeline(description, creator).then((id) => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.info(`saved timeline with id ${id}`);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function dumpTimeline() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("console.info(ACEController.timeline);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateUtils() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import * as AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import * as ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function getServerInfo() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return AppUtils.httpGet(AppUtils.settings.rootPath + \'/server/info\');");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function saveTimeline(description, creator) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return getServerInfo().then((serverInfo) => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("const browser = getBrowserInfo();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("const data = {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("description,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("timeline: JSON.stringify(ACEController.timeline),");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("creator,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("clientVersion: AppUtils.settings.clientVersion,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("device: browser.name + \" \" + browser.version,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("apiKey: AppUtils.settings.aceScenariosApiKey,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("serverVersion: serverInfo.serverVersion");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpPost(AppUtils.settings.aceScenariosBaseUrl + \'api/client-timeline/create\', uuid, false, data).then(() => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve(uuid);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function loadTimeline(id) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return AppUtils.httpGet(AppUtils.settings.aceScenariosBaseUrl + `api/timeline?id=${id}&apiKey=${AppUtils.settings.aceScenariosApiKey}`, AppUtils.createUUID(), false);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("function getBrowserInfo() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("let ua = navigator.userAgent, tem,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (/trident/i.test(M[1])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return {name: \'IE \', version: (tem[1] || \'\')};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (M[1] === \'Chrome\') {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tem = ua.match(/\\bOPR\\/(\\d+)/);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (tem != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return {name: \'Opera\', version: tem[1]};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \'-?\'];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("M.splice(1, 1, tem[1]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("name: M[0],");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("version: M[1]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
