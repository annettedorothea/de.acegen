/********************************************************************************
 * Copyright (c) 2020 Annette Pohl
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/


package de.acegen.extensions

import java.util.List
import de.acegen.aceGen.Model
import de.acegen.aceGen.Attribute
import java.util.ArrayList

class CommonExtension {

	def String copyright() '''
		/********************************************************************************
		 * generated by de.acegen
		 ********************************************************************************/
		
		
		
	'''

	def String sdg() '''
		
		
		/******* S.D.G. *******/
		
		
	'''

	def List<Attribute> allAttributes(Model it) {
		val attrs = new ArrayList<Attribute>();
		allAttributesRec(attrs);
		return attrs;
	}

	def void allAttributesRec(Model it, List<Attribute> attrs) {
		for (attribute : attributes) {
			if (!attrs.containsAttribute(attribute)) {
				attrs.add(attribute)
			}
		}
		for (superModel : superModels) {
			superModel.allAttributesRec(attrs);
		}
	}

	def boolean containsAttribute(List<Attribute> it, Attribute attribute) {
		if (size == 0) {
			return false
		} else {
			for (attr : it) {
				if (attr.name !== null && attribute.name !== null && attr.name.equals(attribute.name)) {
					return true
				}
			}
		}
		return false;
	}
	
	def List<Attribute> allSquishyAttributes(Model it) {
		var list = new ArrayList<Attribute>()
		if (it === null) {
			return list
		} 
		var allAttributes = new ArrayList<Attribute>()
		allAttributesRec(allAttributes)
		for (attribute : allAttributes) {
			if (attribute.squishy) {
				list.add(attribute);
			}
		}
		return list;
	}
	
	def List<Attribute> allUniqueAttributes(Model it) {
		var list = new ArrayList<Attribute>();
		for (attribute : attributes) {
			if (attribute.unique) {
				list.add(attribute);
			}
		}
		return list;
	}
	
	def List<Attribute> allPrimaryKeyAttributes(Model it) {
		var list = new ArrayList<Attribute>();
		for (attribute : attributes) {
			if (attribute.primaryKey) {
				list.add(attribute);
			}
		}
		return list;
	}


}
/******* S.D.G. *******/
