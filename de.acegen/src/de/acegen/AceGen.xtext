/********************************************************************************
 * Copyright (c) 2020 Annette Pohl
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
 

grammar de.acegen.AceGen with org.eclipse.xtext.common.Terminals

generate aceGen "http://www.acegen.de/AceGen"

Project: {Project}
	('HttpClient' httpClient = HttpClient ? | 'HttpServer' httpServer = HttpServer ?)?
;

HttpClient: 
	name = QualifiedName 
	('ACE' (aceOperations += HttpClientAce)*)?
	('ui' (jsx ?= 'JSX')?  
		container = ClientAttribute
		('functions' functions += Function* )? 
	)?
	('scenarios' (scenarios += ClientScenario)*)?
;

HttpClientAce: 
	(async ?= 'async')? name = ID  
		('(' input += Input (',' input += Input)* ')' )?
		('fromAppState' '(' refs += FromAppStateRef (',' refs += FromAppStateRef)* ')' )?  
	('call' serverCall = [HttpServerAce | QualifiedName] )? 
	('loadingFlag' loadingFlag = [ClientAttribute | QualifiedName])? 
	(outcomes += HttpClientOutcome)*
;

Function: 
	name = ID ('(' stateElement = [ClientAttribute | QualifiedName] ')' )?
;

FromAppStateRef:
	stateElement = [ClientAttribute | QualifiedName] ('as' varName = ID)?
;

Input:
	name = ID
;

HttpClientOutcome:
	'on' name = ID 
	('(' 
		listeners += HttpClientStateFunction* 
		functions += FunctionCall *
	')'	)? 
	('triggers' '(' (triggerdAceOperations += TriggerdAceOperation)* ')')? 
;

TriggerdAceOperation:
	('delayInMillis' delay = INT takeLatest ?= 'takeLatest'? ) ? aceOperation = [HttpClientAce | QualifiedName]
;

HttpClientStateFunction:
	stateFunctionType = HttpClientStateFunctionType stateElement = [ClientAttribute | QualifiedName]	
;

FunctionCall:
	'call' function = [Function | QualifiedName]
;

HttpClientStateFunctionType:
	'set' | 'merge'
;

ClientAttribute:
	noComponent ?= 'noComponent'? 
	list ?= 'List'? 
	name = ID 
	location ?= 'location'? 
	storage ?= 'storage'? 
	('{'
		attributes += ClientAttribute*
	'}')?
;

ClientScenario:
	name = ID
	('GIVEN' (givenRefs += ClientGivenRef)* )? 
	clientWhenThen += ClientWhenThen ('AND' clientWhenThen += ClientWhenThen)*
;

ClientWhenThen: 
	{ClientWhenThen} 
	'WHEN' (whenBlock = ClientWhenBlock)? ('delayInMillis' delayInMillis = INT)?
	('THEN' thenBlock = ClientThenBlock)?
	
;

ClientGivenRef:
	scenario = [ClientScenario | QualifiedName] (excludeGiven ?= 'exclude' 'GIVEN')?
;

ClientWhenBlock: 
	action = [HttpClientAce|QualifiedName] 
	('(' (inputValues += InputValue (',' inputValues += InputValue)* )? ')')?
	('squishyValues' squishyValues += SquishyValue (',' squishyValues += SquishyValue)*)?
	
;

SquishyValue:
	{SquishyValue} '{'
		('uuid' uuid = STRING 
		('clientSystemTime' clientSystemTime = STRING)?
		('serverSystemTime' serverSystemTime = STRING)?
		('squishy' attribute = [Attribute | QualifiedName] ':' value = PrimitiveValue)?)?
	'}'
;

InputValue:
	input = [Input | QualifiedName] ':' value = PrimitiveValue
;

ClientThenBlock: {ClientThenBlock} 
	('expectedState' stateVerifications += StateVerification*)?
	('verifications' verifications += ID*)?
;

StateVerification:
	name = ID stateRef = [ClientAttribute | QualifiedName] 'should' (not ?= 'not')? 'be' value = JsonValueClient
;

JsonObjectClient:
	{JsonObjectClient} '{' 
		(members+=JsonMemberClient)?
		(',' members+=JsonMemberClient)* 
	
	'}';

JsonMemberClient:
	attribute=[ClientAttribute | QualifiedName] ':' value=JsonValueClient;
	
JsonValueClient:
	JsonObjectClient | StringType | JsonArrayClient | BooleanType | NullType | LongType | JsonDateTime | UndefinedType;

JsonArrayClient:
	{JsonArrayClient} '[' (values+=JsonValueClient)? (',' values+=JsonValueClient)* ']';






HttpServer:
	java ?= 'Java'?
	cs ?= 'C#'?
	dropwizard ?= 'Dropwizard'?
	dotnet ?= 'NET6'?
	JDBI3 ?= 'JDBI3'?
	EF ?= 'EntityFramework'?
	liquibase ?= 'Liquibase'?
	name = QualifiedName
	('Authorization' authUser = AuthUser)?
	('import' authUserRef = [AuthUser | QualifiedName])?
	('ACE' (aceOperations += HttpServerAce)*	)?
	('views' (views += HttpServerView)* )?
	('models' (models += Model)*)?
	('scenarios' (scenarios += Scenario)*)?
;

HttpServerAce: 
	HttpServerAceWrite | HttpServerAceRead
;

HttpServerAceWrite: 
	name = ID '<' model = [ Model | QualifiedName ] '>' 
	type = WriteFunctionType
	url = STRING
	authorize ?= 'authorize'? 
	multipartFormData ?= 'multipartFormData'? 
	('pathParams' (pathParams += AttributeParamRef)*)?
	('queryParams' (queryParams += AttributeParamRef)*)?
	('payload' (payload += AttributeParamRef)*)?
	('response' (response += [Attribute | QualifiedName])*)?
	(outcomes += HttpServerOutcome)*
;

HttpServerOutcome:
	'on' name = ID 
	('('(listeners += [HttpServerViewFunction | QualifiedName])*')')* 
;

HttpServerAceRead: 
	name = ID '<' model = [ Model | QualifiedName ] '>' 
	type = ReadFunctionType
	url = STRING
	authorize ?= 'authorize'? 
	('pathParams' (pathParams += AttributeParamRef)*)?
	('queryParams' (queryParams += AttributeParamRef)*)?
	('payload' (payload += AttributeParamRef)*)?
	('response' (response += [Attribute | QualifiedName])*)?
;

AttributeParamRef:
	notNull ?= 'NotNull'? attribute = [Attribute | QualifiedName] 
;

HttpServerView: 
	afterCommit ?= 'afterCommit'? name = ID 
	('{'
		(renderFunctions += HttpServerViewFunction)*
	'}')?		
;

HttpServerViewFunction:
	name = ID '(' model = [ Model | QualifiedName ] ')'
;

AuthUser: 
	name = ID
	 ('{'
		attributes += Attribute*
	'}')
;

Model:
	persistent ?= 'persistent'? name = ID ('extends' superModels+=[Model|QualifiedName] (',' superModels+=[Model|QualifiedName])* )? ('{'
		attributes += Attribute*
	'}')?
;

Scenario:
	name = ID
	('GIVEN' (givenItems += Given)* )? 
	whenThen += WhenThen ('AND' whenThen += WhenThen)*
;

WhenThen:
	'WHEN' whenBlock = WhenBlock
	'THEN' thenBlock = ThenBlock
;

Given:
	GivenRef | CustomCall
;

CustomCall:
	customCallName = ID '(' (values += PrimitiveValue (',' values += PrimitiveValue)*)? ')' (times = INT 'x')?
;

GivenRef:
	scenario = [Scenario | QualifiedName] (times = INT 'x')? (excludeGiven ?= 'exclude' 'GIVEN')?
;

WhenBlock: 
	action = [HttpServerAce|QualifiedName] 
	dataDefinition = DataDefinition
	(authorization = Authorization)?
	extractions += Extraction*
;

ThenBlock:
	statusCode = INT 
	('response' 'shouldBe' response = DataDefinition)?
	('persistence' persistenceVerifications += PersistenceVerification*)?
	('verifications' verifications += Verification*)?
;

PersistenceVerification:
	name = ID model = [Model | QualifiedName] expression = PersistenceVerificationExpression
;

PersistenceVerificationExpression:
	SelectByUniqueAttribute | SelectByPrimaryKeys | Count
;

SelectByPrimaryKeys: 
	'selectByPrimaryKey' '(' attributeAndValues += AttributeAndValue (',' attributeAndValues += AttributeAndValue*)? ')' 'shouldBe' expected = SelectByExpectation
;

SelectByUniqueAttribute: 
	'selectBy' '(' attributeAndValue = AttributeAndValue ')' 'shouldBe' expected = SelectByExpectation
;

Count: 
	'filterAndCountBy' '(' attributeAndValues += AttributeAndValue (',' attributeAndValues += AttributeAndValue*)? ')' 'shouldBe' expected = INT
;

AttributeAndValue:
	attribute = [Attribute|QualifiedName] ':' value = PrimitiveValue
;

Verification:
	name = ID
;

Extraction:
	'extract' name = ID  
;

SelectByExpectation:
	object = JsonObject | isNotNull ?= 'notNull' | isNull ?= 'null'	
;

DataDefinition: 
	{DataDefinition} 
	('uuid' uuid = STRING)? 
	('systemTime' systemtime = STRING pattern = STRING)? 
	(data = JsonObject)?
;

Authorization:
	'authorization' username = STRING ':' password = STRING
;

Attribute:
	unique ?= 'Unique'? 
	primaryKey ?= 'PrimaryKey'? 
	notNull ?= 'NotNull'? 
	list ?= 'List'? 
	(type = Type | model = [Model | QualifiedName])
	name = ID 
	('references' foreignKey = [Attribute | QualifiedName])? 
	squishy ?= 'squishy'?
;

QualifiedName:
  ID ('.' ID)*
;

WriteFunctionType:
	'POST' | 'PUT' | 'DELETE'
;

ReadFunctionType:
	'GET'
;

Type:
	'Integer' | 'String' | 'Float' | 'Boolean' | 'DateTime' | 'Long' | 'FormData'
;

JsonObject: JsonObjectAce | 'json' StringType;
	
JsonObjectAce: 
	{JsonObjectAce} '{' 
		(members+=JsonMember)?
		(',' members+=JsonMember)* 
	
	'}';

JsonMember:
	attribute=[Attribute | QualifiedName] ':' value=JsonValue;
	
JsonValue:
	JsonObject | StringType | JsonArray | BooleanType | NullType | LongType | JsonDateTime;

JsonArray:
	{JsonArray} '[' (values+=JsonValue)? (',' values+=JsonValue)* ']';
	
JsonDateTime:
	dateTime = STRING pattern = STRING
;

StringType:
	string = STRING
;

BooleanType:
	boolean = JsonBoolean
;

NullType:
	null ?= 'null'
;

UndefinedType:
	undefined ?= 'undefined'
;

LongType:
	long = INT
;

JsonBoolean:
  'true' | 'false';

PrimitiveValue:
	string = STRING | long = INT
;

/******* S.D.G. *******/
	
	

